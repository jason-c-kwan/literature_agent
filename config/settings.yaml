version: "0.1"

# Configuration for literature search agent

# API Keys and Endpoints
# IMPORTANT: Store actual API keys in a .env file (e.g., PUBMED_API_KEY=yourkey).
# This file (settings.yaml) is for non-sensitive configurations.
# The application will prioritize values from .env variables if they exist.
# Example structure if you were to put them here (NOT RECOMMENDED for secrets):
# api_keys:
#   pubmed: PLACEHOLDER_PUBMED_KEY
#   semantic_scholar: PLACEHOLDER_S2_KEY

# Top-level weights and caps for test_settings.py compatibility
weights:
  # Example weights, adjust as needed for the test or actual use
  # These seem to be general weights, distinct from ranking_settings.weights
  some_general_weight: 1.0
  another_general_weight: 0.5

caps:
  # Example caps, adjust as needed
  max_items_general: 100
  processing_limit_general: 50


# Search settings
search_settings:
  default_max_results_per_source: 5
  default_publication_types: # Default if --pub-types CLI flag is not used
    - "research"
    - "review"
  # Add other search-related defaults here if needed

# Mappings for publication types from user input (CLI/default) to API-specific terms
publication_type_mappings:
  research: # User input string "research"
    pubmed: "Journal Article[Publication Type]" # Value for PubMed 'term' filter
    europepmc: "PUB_TYPE:\"journal-article\""  # Value for EuropePMC query
    semanticscholar: "JournalArticle"          # Value for Semantic Scholar 'publication_types' parameter
    crossref: "journal-article"                # Value for CrossRef 'type' filter
    openalex: "journal-article"                # Value for OpenAlex 'type' filter (or 'work_type' if that's confirmed)
  review: # User input string "review"
    pubmed: "Review[Publication Type]"
    europepmc: "PUB_TYPE:\"review\""
    semanticscholar: "Review"
    crossref: "review-article"
    openalex: "review-article"

# Triage Agent Settings (example)
triage_settings:
  relevance_threshold: 3 # Example: minimum score to keep an article
  # other triage parameters...

# Ranking Agent Settings (example)
ranking_settings:
  # parameters for ranking...
  weights:
    year: 0.2
    citation_count: 0.5
    # other ranking criteria...

# LLM Model configurations (used by agents that call LLMs)
# These are illustrative; actual structure depends on how agents load model configs.
# model_configs:
#   query_refiner_model:
#     provider: "openai" # or "azure", "anthropic", etc.
#     model_name: "gpt-3.5-turbo"
#     # other model parameters like temperature, max_tokens
#   triage_model:
#     provider: "openai"
#     model_name: "gpt-4"

# Other application-wide settings
# Example:
# logging_level: "INFO"
